mean(x)
qnorm(.7)
qnorm(.3, lower.tail = FALSE)
qnorm(2.81)
1-qnorm(2.81)
qnorm(.7)
qnorm(2.81)
qnorm(2.81, lower.tail = FALSE)
qnorm(p = 2.81)
qnorm(1.44)
qnorm(2.81)
help(qnorm)
pnorm(2.81)
1-pnorm(2.81)
qnorm(0.0025)
1-pnorm(1.44)
(1-pnorm(1.44))*2
1-(1-pnorm(1.44))*2
qnorm(1-0.0015)
qnorm(.5)
qnorm(1-0.125)
pnorm(.81)
qnorm(.0025)
qnorm(1-0.0025)
qnorm(1.96)
pnorm(1.96)
qnorm(0.975)
qnorm(.99)
qnorm(.995)
qnorm(.95)
qnorm(.96)
location = "file:///C:/Users/Michael Streyle/Desktop/Applied Stats II 328/"
data = read.table (paste (location, "CH16PR09.txt", sep=""),
col.names=c("Recovery", "PriorPhysFit", "Subj"))
attach (data)
boxplot (Recovery ~ PriorPhysFit, ylab="Recovery",
xlab="PriorPhysFit (1=Below Average, 2=Average, 3=Above Average)")
points (Recovery ~ jitter (PriorPhysFit, 0.5))
location = "file:///C:/Users/Michael Streyle/Desktop/Applied Stats II 328/APPENC05.txt"
data = read.table (paste (location))
attach (data)
boxplot (V2 ~ V9, ylab="PSA Level", xlab="Gleason Score")
min(data$V2)
min(data$V9)
data$log.PSA = log(data$V2)
detach(data)
attach (data)
fit1 = lm (V2 ~ V9)
summary (fit1)
location = "file:///C:/Users/Michael Streyle/Desktop/Applied Stats II 328/APPENC07.txt"
data = read.table (paste (location))
attach (data)
boxplot (V2 ~ V4, ylab="Sales Price", xlab="Bedrooms")
data$bed.coded = "bed"
data$bed.coded [V4 == 0] = "c0-2"
data$bed.coded [V4 == 1] = "c0-2"
data$bed.coded [V4 == 2] = "c0-2"
data$bed.coded [V4 == 3] = "c3"
data$bed.coded [V4 == 4] = "c4"
data$bed.coded [V4 > 4] = "c4+"
min(data$V2)
data$log.sales.price = log(data$V2)
detach(data)
attach (data)
boxplot (V2 ~ bed.coded, ylab="Sales Price", xlab="Bedroom Groups")
boxplot (log.sales.price ~ bed.coded, ylab="Log Sales Price", xlab="Bedroom Groups")
fit1 = lm (V2 ~ bed.coded)
summary (fit1)
require("MASS")
boxcox (fit1)
data$trans.sales = (data$V2)^(-0.75)
fit2 = lm (data$trans.sales ~ bed.coded)
summary (fit2)
anova (fit2)
plot (fit2)
location = "file:///C:/Users/Michael Streyle/Desktop/Applied Stats II 328/APPENC05.txt"
data = read.table (paste (location))
attach (data)
boxplot (V2 ~ as.factor(V9), ylab="PSA Level", xlab="Gleason Score")
boxplot (V2 ~ V9, ylab="PSA Level", xlab="Gleason Score")
fit1 = lm (V2 ~ as.factor(V9))
summary (fit1)
View(data)
View(data)
par (mfrow=c(1,2))
plot (fit1)
require("MASS")
boxcox (fit1)
fit2 = lm (log.PSA ~ as.factor(V9))
summary (fit2)
plot (fit2)
g.unq = unique (V9)
ord.levels = g.unq [order (g.unq)]
g.unq
predvals = predict (fit2, data.frame (V9=ord.levels),
interval='confidence')
predvals
pred.linear = 10^(predvals)
round (pred.linear, 2)
boxplot (V2 ~ V9, ylab="PSA Level", xlab="Gleason Score")
qt(p = .9, df = 15)
qt(p = .95, df = 15)
qt(p = .95, df = 25)
qt(p = .95, df = 40)
qt(p = .995, df = 40)
qt(p = .95, df = 10)
qt(p = .975, df = 10)
qt(p = .975, df = 15)
qt(p = .995, df = 15)
qt(p = .995, df = 4)
qt(p = .99, df = 24)
qt(p = .995, df = 37)
qt(p = .95, df = 10)
qt(p = .95, df = 15)
qt(p = .99, df = 15)
qt(p = .99, df = 4)
qt(p = .98, df = 24)
qt(p = .99, df = 38)
qt(p = .98, df = 24)
qt(p = .975, df = 13)
qt(p = .95, df = 13)
qt(p = .95, df = 13)
qt(p = .975, df = 14)
qt(p = .95, df = 25)
qt(p = .975, df = 19)
x=c(107.1, 109.5, 107.4, 106.8,108.1)
qqnorm(x)
qqline(x)
shapiro.test(x)
mean(x)
sd(x)
qt(p = .975, df = 4)
qchisq(p = .9, df = 15)
qchisq(p = .99, df = 25)
qchisq(p = .9, df = 25)
qchisq(p = .975, df = 10)
qchisq(p = .95, df = 10)
qchisq(p = .05, df = 10)
pchisq(q = 36.78, df = 22)
pchisq(q = 36.78, df = 22) - pchisq(q = 10.98, df = 22)
1-(pchisq(q = 37.652, df = 25) - pchisq(q = 14.611, df = 25))
qchisq(p = .975, df = 8)
qchisq(p = .025, df = 8)
x=c(33.2,41.8,37.3,40.2,36.7,39.1,36.2,41.8,36.0,35.2,36.7,38.9,35.8,35.2,40.1)
qqnorm(x)
qqline(x)
shapiro.test(x)
qchisq(p = .975, df = 14)
qchisq(p = .025, df = 14)
sd(x)
qchisq(p = .05, df = 14)
pbinom(q = 6, size = 25)
pbinom(q = 6, size = 25, prob = .5)
pbinom(q = 6, size = 25, prob = .5) + (1 - pbinom(q = 18, size = 25, prob = .5))
qnorm(.99)
qnorm(-0.31)
qnorm(0.31)
pnorm(-0.31)
pnorm(1.42)
1-pnorm(1.42)
1-pnorm(.9)
1-pnorm(1.96)
1-pnorm(2.48)
1-pnorm(-.11)
pnorm(2.56)
1-pnorm(2.56)
pnorm(1)
pnorm(.05)
pnorm(.95)
qnorm(.05)
qnorm(.95)
qnorm(-2.27)
pnorm(-2.27)
qnorm(.95)
qnorm(.995)
qnorm(-.75)-qnorm(-5.91)
pnorm(-.75)-pnorm(-5.91)
qnorm(.995)
qnorm(.227)
pnorm(.227)
qnorm(.227)
1-qnorm(.227)
qnorm(0.1)
qnorm(.9)
qnorm(3.33)
pnorm(3.33)
1-pnorm(3.33)
pnorm(.995)
qnorm(.995)
pnorm(-3.91) + (1-pnorm(1.24))
qnorm(.995)
qnorm(.99)
pnorm(.03467)
pnorm(-1.802)
pt(q = 1.6, df = 12)
1-pt(q = 1.6, df = 12)
2*pt(-abs(1.6), df = 12)
2*pt(-abs(1.6), df = 12)
2*pt(-abs(-2.6), df = 24)
2*pt(-abs(-3.9), df = 24)
1-pt(3.2, df = 14)
1-pt(1.8, df = 8)
1-pt(-0.2, df = 23)
x=c(32.1, 30.6, 31.4, 30.4, 31.0, 31.9)
t.test(x = x, mu=30, alternative = 'g')
power.t.test(n = 6, delta = 1, sd = .65, sig.level = .01, type = 'one.sample', alternative = 'one.sided')
power.t.test(n = 6, delta = 2, sd = .65, sig.level = .01, type = 'one.sample', alternative = 'one.sided')
power.t.test(n = 6, delta = 1, sd = .80, sig.level = .01, type = 'one.sample', alternative = 'one.sided')
power.t.test(n = 6, delta = 2, sd = .80, sig.level = .01, type = 'one.sample', alternative = 'one.sided')
power.t.test(delta = 1, sd = .65, sig.level = .01, type = 'one.sample', alternative = 'one.sided', power = .9)
x=c(159, 120, 480, 149, 270, 547, 340, 43, 228, 202, 240, 218)
t.test(x, mu=200, alternative = 'g', )
power.t.test(n=12, delta = 100, sd = 150, sig.level = .05, type = 'one.sample', alternative = 'one.sided')
x=c(.53, .65, .46, .50, .37)
qqnorm(x)
qqline(x)
shapiro.test(x)
t.test(x, mu=.6, alternative = 'l')
x=c(112.3, 97, 92.7, 86, 102, 99.2, 95.8, 103.5, 89, 86.7)
qqnorm(x)
qqline(x)
shapiro.test(x)
t.test(x, mu=100, alternative = 'l')
1-pnorm(1.47)
pnrom(-2.70)
pnorm(-2.70)
2*pnorm(-2.70)
pnorm(.25)
262+159+120
120/541
1-pnorm(1.279)
qbinom(p = .95, size = 541, prob = .2)
pbinom(124, size=541, .2)
pbinom(123, size=541, prob=.25)
1-pnorm(1.3333)
qbinom(.95, size=100, prob=.2)
pbinom(26, size=100, prob=.15)
qbinom(.95, size=100, prob=.10)
pbinom(14, size=100, prob=.15)
qbinom(.95, size=200, prob=.10)
pbinom(26, size=200, prob=.15)
qnorm(.95)
qnorm(.9)
2*pnorm(-.49183)
pnorm(-.9986)
2*pnorm(-3.07794)
qbinom(.99, size=500, prob=.05)
pbinom(36, size=500, prob=.10)
1-pnorm(3.57)
1-pnorm(1.87)
pnorm(-2.90)
1-pnorm(-.92)
qnorm(.1)
qnorm(.90)
qnorm(3.56)
pnorm(3.56)
1-pnorm(3.56)
pnorm(-0.5)
2*pnorm(-1.88)
2*pnorm(-28.57)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
library("emmeans", lib.loc="~/R/win-library/3.4")
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R')
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R')
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R')
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
sigma = 23
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
source('C:/Users/Michael Streyle/Downloads/RBD Simulator.R', echo=TRUE)
prop.test(c(164,140), n = c(200, 200), alternative = 'g')
prop.test(c(35,66), n = c(80, 80), alternative = 't')
power.prop.test(n = c(80, 80), p1 = .5, p2 = .25, sig.level = .99, alternative = 'two.sided')
power.prop.test(n = c(80, 80), p1 = .5, p2 = .25, sig.level = .01, alternative = 'two.sided')
prop.test(c(224,126), n = c(395, 266), alternative = 't')
qnorm(.975)
2*pnorm(-.7994)
prop.test(c(18,12), c(56, 51), alternative = 't')
x=c(9.85, 9.93, 9.75, 9.77, 9.67, 9.87, 9.67, 9.94, 9.85, 9.75, 9.83, 9.92, 9.74, 9.99, 9.88, 9.95, 9.95, 9.93, 9.92, 9.89)
x=c(9.85, 9.93, 9.75, 9.77, 9.67, 9.87, 9.67, 9.94, 9.85, 9.75, 9.83, 9.92, 9.74, 9.99, 9.88, 9.95, 9.95, 9.93, 9.92, 9.89)
qqnorm(x)
shapiro.test(x)
qqline(x
)
t.test(x = x, alternative = 'l', mu = 9.75)
t.test(x = x, alternative = 'g', mu = 9.75)
t.test(x = x, alternative = 'g', mu = 9.75)
prop.test(x = 346, n = 855, alternative = 't')
y = c(1, 2, 3, 4, 5, 6)
t.test(x, y, alternative = 't')
plot(x)
hist(x)
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
histo()
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
histo()
source('C:/Users/Michael Streyle/Downloads/three-factor ANOVA simulation.R')
histo()
beer.fit1 = lm(life ~ (labratory + carborundum + beertype)^3)
par (mfrow=c(1,2))
plot(beer.fit1)
# Chunk 1
#setwd("C:/Users/Michael Streyle/Desktop/Applied Stats II 328/Project")
#data from my local drive
#data = read.csv('beerhead_halflife.csv', sep="", col.names=c("lab", "carb", "beer", 'life'))
#data straight from online
beerdata <- read.table('http://users.stat.ufl.edu/~winner/data/beerhead_halflife.dat', sep="", col.names=c("lab", "carb", "beer", 'life'))
# Chunk 2
#create qualitative factors
beerdata$labratory = ifelse(beerdata$lab == 1, 'lab1', ifelse(beerdata$lab == 2, 'lab2',
ifelse(beerdata$lab == 3, 'lab3', ifelse(beerdata$lab == 4, 'lab4',
'lab5'))))
beerdata$carborundum = ifelse(beerdata$carb == 1, 'carb1', 'carb2')
beerdata$beertype = ifelse(beerdata$beer == 1, 'beer1', ifelse(beerdata$beer == 2, 'beer2',
ifelse(beerdata$beer == 3, 'beer3', ifelse(beerdata$beer == 4,
'beer4', 'beer5'))))
beer.fit1 = lm(life ~ (labratory + carborundum + beertype)^3)
attach(beerdata)
beer.fit1 = lm(life ~ (labratory + carborundum + beertype)^3)
par (mfrow=c(1,2))
plot(beer.fit1)
beer.fit1 = lm(life ~ (labratory + carborundum + beertype)^3)
par (mfrow=c(1,2))
plot(beer.fit1)
View(beerdata)
plot(beerdata)
plot(beerdata$lab, beerdata$life)
boxplot(beerdata$lab, beerdata$life)
boxplot(beerdata$labratory, beerdata$life)
boxplot(beerdata$lab, beerdata$life)
boxplot(beerdata$beer, beerdata$life)
boxplot(beerdata$beer, beerdata$life)
View(beerdata)
beerdata <- read.table('http://users.stat.ufl.edu/~winner/data/beerhead_halflife.dat', sep="", col.names=c("lab", "carb", "beer", 'life'))
beerdata$labratory = ifelse(beerdata$lab == 1, 'lab1', ifelse(beerdata$lab == 2, 'lab2',
ifelse(beerdata$lab == 3, 'lab3', ifelse(beerdata$lab == 4, 'lab4',
'lab5'))))
beerdata$carborundum = ifelse(beerdata$carb == 1, 'carb1', 'carb2')
beerdata$beertype = ifelse(beerdata$beer == 1, 'beer1', ifelse(beerdata$beer == 2, 'beer2',
ifelse(beerdata$beer == 3, 'beer3', ifelse(beerdata$beer == 4,
'beer4', 'beer5'))))
attach(beerdata)
boxplot(beerdata$beer, beerdata$life)
boxplot(beerdata$beer ~ beerdata$life)
boxplot(beerdata$life ~ beerdata$beer)
boxplot(beerdata$life ~ beerdata$beer, xlab='Beer Type', ylab='Beer Foam Half Life')
View(beerdata)
boxplot(beerdata$life ~ beerdata$lab, xlab='Lab', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$carb, xlab='Beer Type', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$carb, xlab='Carborundum', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$beer, xlab='Beer Type', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$lab, xlab='Lab', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$carb, xlab='Carborundum', ylab='Beer Foam Half Life')
boxplot(beerdata$life ~ beerdata$beer, xlab='Beer Type', ylab='Beer Foam Half Life')
beerdata$loglife = log10 (beerdata$life)
beerdata$loglife = log10 (beerdata$life)
detach(beerdata)
attach(beerdata)
boxplot(beerdata$loglife ~ beerdata$beer, xlab='Beer Type', ylab='Log of Beer Foam Half Life')
fit1 = lm (life ~ (labratory + beertype + carborundum)^3)
anova (fit1)
plot(fit1)
interaction.plot(lab ~ beer)
library("MASS", lib.loc="C:/Program Files/R/R-3.4.1/library")
library(MASS)
boxcox(fit1)
beerdata$boxcoxtrans = beerdata$life^0.6
detach(beerdata)
attach(beerdata)
boxplot(beerdata$boxcoxtrans ~ beerdata$beer, xlab='Beer Type', ylab='Log of Beer Foam Half Life')
fit2 = lm (boxcoxtrans ~ (labratory + beertype + carborundum)^3)
anova (fit2)
summary(fit2)
summary(fit1)
plot(fit2)
detach(beerdata)
attach(beerdata)
fit2 = lm (boxcoxtrans ~ (labratory + beertype + carborundum)^3)
anova (fit2)
summary(fit2)
plot(fit2)
beerdata <- read.table('https://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/housing.txt', sep="", col.names=c("crime", "land_prop", "non_retail", 'river', 'nitox', 'rooms', 'ageprop', 'workdist', 'highway', 'taxrate', 'peopleteacher', 'blacks', 'lowerstat', 'medianval'))
housdata <- read.table('https://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/housing.txt', sep="", col.names=c("crime", "land_prop", "non_retail", 'river', 'nitox', 'rooms', 'ageprop', 'workdist', 'highway', 'taxrate', 'peopleteacher', 'blacks', 'lowerstat', 'medianval'))
View(housdata)
housdata <- read.table('http://users.stat.ufl.edu/~winner/data/civwar2.dat', sep="", col.names=c("company", "num_soldiers", "year", 'deaths', 'illness_deaths', 'injury_deaths', 'perc_farmer', 'perc_foreign'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/civwar2.dat', sep="", col.names=c("company", "num_soldiers", "year", 'deaths', 'illness_deaths', 'injury_deaths', 'perc_farmer', 'perc_foreign'))
hist(data$company)
hist(data$num_soldiers)
hist(data$year)
hist(data$deaths)
hist(data$illness_deaths)
hist(data$injury_deaths)
hist(data$perc_farmer)
hist(data$perc_foreign)
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat')#, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', header = T) #, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', header = F) #, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', header = F, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', header = F, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9', '10'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', skip=3, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8', '9', '10'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', skip=3, sep="", col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
readLines('http://users.stat.ufl.edu/~winner/data/armada.dat')
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', sep=" ", col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat')#, col.names=c("1", "2", "3", '4', '5', '6', '7', '8'))
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat'
readLines('http://users.stat.ufl.edu/~winner/data/armada.dat')
```
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat')
readLines('http://users.stat.ufl.edu/~winner/data/armada.dat')
data <- read.table('http://users.stat.ufl.edu/~winner/data/armada.dat', sep='"')
View(data)
s = split(data$workdist, data$river)
riv_workdist = s$`1`
data <- read.table('https://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/housing.txt', sep="", col.names=c("crime", "land_prop", "non_retail", 'river', 'nitox', 'rooms', 'ageprop', 'workdist', 'highway', 'taxrate', 'peopleteacher', 'blacks', 'lowerstat', 'medianval'))
attach(housdata)
s = split(data$workdist, data$river)
riv_workdist = s$`1`
noriv_workdist = s$`0`
length(riv_workdist)
length(noriv_workdist)
t.test(riv_workdist, noriv_workdist, alternative = 't')
data$log_crime = log(data$crime)
hist(data$log_crime)
hist(data$crime)
summary(data$log_crime)
data$HLcrime = ifelse(data$log_crime >= 0, 'high', 'low')
View(data)
data$LMHcrime = ifese(data$log_crime >= 2, 'high', ifelse(data$log_crime <= -2, 'low', 'medium'))
data$LMHcrime = ifelse(data$log_crime >= 2, 'high', ifelse(data$log_crime <= -2, 'low', 'medium'))
hist(data4LMHcrime)
hist(data$LMHcrime)
s = split(data$medianval, data$HLcrime)
high = s$high
low = s$low
t.test(x = x, y = y, alternative = 't')
t.test(x = high, y = low, alternative = 't')
qqnorm(high)
qqnorm(low)
shapiro.test(high)
shapiro.test(low)
qqnorm(data$peopleteacher)
s = split(data$peopleteacher, data$LMHcrime)
highcrime = s$high
medcrime = s$medium
lowcrime = s$low
qqnorm(highcrime)
qqnorm(medcrime)
qqnorm(lowcrime)
hist(highcrime)
hist(medcrime)
hist(lowcrime)
library("Synth", lib.loc="~/R/win-library/3.5")
install.packages("tidyverse")
library(tidyverse)
t.test(x = c(.16525, .18288, .18588), y = c(.32788, .27925, .21688), paired = T, mu = 0)
t.test(x = c(.16525, .18288, .18588), y = c(.32788, .27925, .21688), paired = T, mu = 0, alternative = "two.sided")
t.test(x=.16525, y=.32788, alternative = "two.sided", mu=0)
setwd("C:/Users/Michael Streyle/Desktop/Senior Project") #laptop
data1  <- read.csv('Dataset_spine.csv', col.names = c('pelvic_incidence', 'pelvic_tilt', 'lumbar_lordosis_angle', 'sacral_slope', 'pelvic_radius', 'degree_spondylolisthesis', 'pelvic_slope', 'Direct_tilt', 'thoracic_slope', 'cervical_tilt', 'sacrum_angle', 'scoliosis_slope', 'classification', ' '))
data1$X. <- NULL #dropping the column with variable descriptions in it
par (mfrow = c(1,1))
data = scale(data1[, 1:12]) #scaling all except classification variable
data = data.frame(data)
data$classification = data1$classification #add classification back into scaled dataframe
data$class = ifelse(data$classification == "Abnormal", 0, 1) #making classification numeric
library(e1071) #SVM
library(randomForest)
library(caret) #for confusion matrices
attach(data)
hist(pelvic_incidence)
hist(pelvic_tilt)
hist(lumbar_lordosis_angle)
hist(sacral_slope)
hist(pelvic_radius)
hist(degree_spondylolisthesis)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(data, col = my_cols[data$classification]) #pairs plot
